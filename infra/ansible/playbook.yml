---
- name: Setup EC2 instance
  hosts: ec2_instances
  become: yes
  vars:
    ansible_user: ubuntu
    github_username: jetale
    github_access_token: $GIT_PASSWORD
    repo_url: https://github.com/jetale/postings_parser.git
    repo_name: postings_parser
    repo_dest: /home/ubuntu/postings_parser
    github_ssh_key_path: "/home/ubuntu/.ssh/id_rsa" 
  tasks:
    - name: Update apt cache
      apt:
        update_cache: yes

    - name: Install prerequisites
      apt:
        name: [ca-certificates, curl]
        state: present

    - name: Create directory for Docker keyring
      file:
        path: /etc/apt/keyrings
        state: directory
        mode: '0755'

    - name: Download Docker GPG key
      shell: |
        curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
        chmod a+r /etc/apt/keyrings/docker.asc

    - name: Add Docker repository to Apt sources
      shell: |
        echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null

    - name: Update apt cache after adding repository
      apt:
        update_cache: yes

    - name: Install Docker packages
      apt:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
          - docker-buildx-plugin
          - docker-compose
        state: present

    - name: Add user to the docker group
      user:
        name: ubuntu
        groups: docker
        append: yes

    - name: Ensure Docker service is started
      service:
        name: docker
        state: started
        enabled: yes

    - name: Enable SSH agent forwarding for sudo
      lineinfile:
        dest: /etc/sudoers
        insertafter: '^#?\s*Defaults\s+env_keep\b'
        line: 'Defaults    env_keep += "SSH_AUTH_SOCK"'

    - name: Run ssh-add -l command
      command: ssh-add -l
      register: ssh_add_output

    - name: Display output
      debug:
        var: ssh_add_output.stdout_lines

    - name: Clone private git repository
      git:
        repo: "{{ repo_url }}"
        clone: true
        dest: "{{ repo_dest }}"

    - name: Build Docker image
      command: docker build . --file Dockerfile --tag postings_parser_image 
      args:
        chdir: "{{ repo_dest }}"

    - name: Run Docker container
      command: docker run -p 5432:5432 \
        -e PGHOST='ep-purple-king-a5n11fyg.us-east-2.aws.neon.tech' \
        -e PGDATABASE='postings_db' \
        -e PGUSER='postings_db_owner' \
        -e PGPASSWORD='WsEr5pQf0gFz' \
        -e RUN_SELENIUM='true' \
        postings_parser_image

    - name: Prune all stopped Docker containers
      command: docker container prune -f
      register: prune_result

    - name: Print prune result
      debug:
        var: prune_result.stdout
